{
  "Generates a main file for you": {
    "prefix": "main",
    "body": [
      "const Discord = require(\"discord.js\");",
      "const { MessageEmbed, Message } = require(\"discord.js\");",
      "const { Client } = require(\"discord.js\");",
      "const fs = require(\"fs\");",
      "",
      "const client = new Discord.Client({});",
      "client.commands = new Discord.Collection();",
      "client.aliases = new Discord.Collection();",
      "",
      "client.on(\"ready\", async () => {",
      "  client.user.setActivity(\"you\", { type: \"LISTENING\" });",
      "",
      "  const totalGuilds = client.guilds.cache.size;",
      "  const totalMembers = client.users.cache.size;",
      "",
      "  return console.log(",
      "    `Ready! \\n Server count: ${totalGuilds}\\nMember count: ${totalMembers}`",
      "  );",
      "});",
      "client.on(\"message\", async (msg) => {});",
      "// your commands folder folder",
      "fs.readdir(\"./commands/\", (error, Category) => {",
      "  if (error) throw error;",
      "  Category.forEach((category) => {",
      "    fs.readdir(`./commands/${category}`, (err, commands) => {",
      "      if (err) throw err;",
      "",
      "      commands.forEach((command) => {",
      "        const cmd = require(`./commands/${category}/${command}`);",
      "",
      "        client.commands.set(cmd.config.name, cmd);",
      "        cmd.config.aliases.forEach((alias) => {",
      "          client.aliases.set(alias, cmd.config.name);",
      "        });",
      "      });",
      "    });",
      "  });",
      "});",
      "client.on(\"message\", async (msg) => {",
      "  if (msg.author.bot) return;",
      "",
      "  const prefix = \"!\";",
      "",
      "  const prefixRegex = new RegExp(`^(<@!?${client.user.id}>)\\\\s*`);",
      "  const matchedPrefix = msg.content.match(prefixRegex);",
      "  if (matchedPrefix) {",
      "    msg.channel.send(`Prefix: ${prefix}`);",
      "  }",
      "",
      "  const args = msg.content.split(\" \");",
      "",
      "  let cmd = args.shift().slice(prefix.length).toLowerCase();",
      "",
      "  if (!msg.content.startsWith(prefix)) return;",
      "  let commandfile =",
      "    client.commands.get(cmd.toLowerCase()) ||",
      "    client.commands.get(client.aliases.get(cmd));",
      "  let command;",
      "  if (commandfile) {",
      "    command = client.commands.get(cmd);",
      "",
      "    await commandfile.run(msg, args, client);",
      "  } else {",
      "    await commandfile.run(msg, args, client);",
      "  }",
      "});",
      "client.login(\"${1:token}\")",
      ""
    ],
    "description": "Generates a main file for you"
  },
  "generates a command tools ": {
    "prefix": "cmd",
    "body": [
      "const Discord = require(\"discord.js\");",
      "const {MessageEmbed, Message} = require(\"discord.js\")",
      "const { Client, Util } = require(\"discord.js\");",
      "",
      "",
      "/**",
      " * ",
      " * @param {MessageEmbed} embed ",
      " * @param {Message} msg ",
      " * @param {Client} undefined",
      " */",
      "module.exports.run = async (msg, args, client) => {",
      " msg.channel.send(\"pong!\")",
      "",
      "}",
      "module.exports.config = {",
      "  name: \"ping\",",
      "  usage: \"pong\",",
      "  description: \"Ping pong command\",",
      "  category: \"Fun\",",
      "  aliases: [],",
      "};"
    ],
    "description": "generates a command file "
  },
  "Message Collector": {
    "prefix": "messageCollector",
    "body": [
      "    const filter = (m) =>",
      "    msg.author.id === m.author.id && m.channel.id === msg.channel.id;",
      "  const collector = msg.channel.createMessageCollector(filter, {",
      "    max: 1,",
      "    time: 120000,",
      "    errors: [\"time\"],",
      "  });",
      "  collector.on(\"collect\", async (m) => {",
      "    //do stuff here",
      "  });",
      ""
    ],
    "description": "Message Collector"
  },
  "On ready event": {
    "prefix": "ready",
    "body": ["${1:client}.on(\"ready\", () => {", "    ", "})"],
    "description": "On ready event"
  },
  "On message event": {
    "prefix": "message",
    "body": ["${1:client}.on(\"message\", (msg) => {", "    ", "})"],
    "description": "On message event"
  }
}
